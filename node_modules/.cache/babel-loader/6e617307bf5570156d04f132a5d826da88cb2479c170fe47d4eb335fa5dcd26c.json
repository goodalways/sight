{"ast":null,"code":"var _jsxFileName = \"/Users/jonathanyap/Downloads/Revised Sight/sight/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState /*useCallback*/ } from 'react';\nimport './App.css';\nimport Navbar from './Components/Navbar';\nimport Webcam from \"react-webcam\";\nimport { useSpeechRecognition, useSpeechSynthesis } from 'react-speech-kit';\nimport { imageDb } from './firebaseConfig';\nimport { ref, uploadString } from 'firebase/storage';\nimport { addDoc, collection } from 'firebase/firestore';\nimport { v4 } from 'uuid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [speechValue, setSpeechValue] = useState('');\n  // const { listen, listening, stop } = useSpeechRecognition({\n  //   onResult: (speechResult) => {\n  //     setSpeechValue(speechResult)\n  //   }\n  // })\n\n  const onEnd = () => {\n    // You could do something here after listening has finished\n  };\n  const onResult = speechResult => {\n    setSpeechValue(speechResult);\n  };\n  const onError = event => {\n    if (event.error === 'not-allowed') {\n      setBlocked(true);\n    }\n  };\n  const {\n    listen,\n    listening,\n    stop\n  } = useSpeechRecognition({\n    onResult,\n    onEnd,\n    onError\n  });\n  const toggle = listening ? stop : () => {\n    setBlocked(false);\n    listen();\n  };\n  const {\n    speak,\n    cancel,\n    speaking\n  } = useSpeechSynthesis({\n    onEnd\n  });\n  const [img, setImg] = useState(null);\n  const webcamRef = useRef(null);\n  const [apiResult, setAPIResult] = useState('');\n  const [statusMessage, setStatusMessage] = useState('');\n  const [uploadProgress, setUploadProgress] = useState(0);\n  const [prompt, setPrompt] = useState('Imagine that I am a visual impaired individual. Tell me the brand and the object that I am holding. Only describe the object in the foreground. Do not describe the person holding the object.');\n  const [blocked, setBlocked] = useState(false);\n  const [uploadedFileName, setFilename] = useState('');\n  const videoConstraints = {\n    width: 420,\n    height: 420,\n    facingMode: \"environment\"\n  };\n\n  // const capture = useCallback(() => {\n  //   const imageSrc = webcamRef.current.getScreenshot();\n  //   setImg(imageSrc);\n  //   setStatusMessage('Sending request...');\n  //   setUploadProgress(10); // Initial progress\n  //   // eslint-disable-next-line react-hooks/exhaustive-deps\n  //   callGPT4(imageSrc, prompt); \n  // }, [webcamRef]);\n\n  const capture = () => {\n    const imageSrc = webcamRef.current.getScreenshot();\n    setImg(imageSrc);\n    setStatusMessage('Sending request...');\n    setUploadProgress(10); // Initial progress\n    callGPT4(imageSrc, prompt);\n    uploadPhoto(imageSrc);\n  };\n  const talkmethod = textToRead => {\n    const msg = new SpeechSynthesisUtterance();\n    msg.text = textToRead;\n    window.speechSynthesis.speak(msg);\n  };\n  const callGPT4 = async (imageString, promptToSend) => {\n    const base64String = imageString.replace('data:', '').replace(/^.+,/, '');\n    const data = {\n      model: \"gpt-4-vision-preview\",\n      messages: [{\n        \"role\": \"user\",\n        \"content\": [{\n          \"type\": \"text\",\n          \"text\": promptToSend\n        }, {\n          \"type\": \"image_url\",\n          \"image_url\": {\n            \"url\": `data:image/jpeg;base64,${base64String}`\n          }\n        }]\n      }],\n      max_tokens: 200\n    };\n    try {\n      const response = await fetch('https://api.openai.com/v1/chat/completions', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${process.env.REACT_APP_OPENAI_API_KEY}` // Use environment variable for API key\n        },\n\n        body: JSON.stringify(data)\n      });\n      setUploadProgress(50); // Midway progressgit\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const apiResponse = await response.json();\n      setUploadProgress(100); // Final progress\n      if (apiResponse.choices && apiResponse.choices.length > 0) {\n        talkmethod(apiResponse.choices[0].message.content);\n        setAPIResult(apiResponse.choices[0].message.content);\n        setStatusMessage('Analysis complete.');\n      } else {\n        console.error('No choices returned from API');\n        setStatusMessage('Failed to get a response from the API.');\n      }\n    } catch (error) {\n      console.error('Error:', error);\n      alert(error);\n      alert(process.env.REACT_APP_OPENAI_API_KEY);\n      setStatusMessage('An error occurred during the analysis.');\n    }\n  };\n  const sendNewPrompt = () => {\n    const newPrompt = prompt + '\\n' + apiResult + '\\n' + speechValue;\n    setPrompt(newPrompt);\n    setStatusMessage('Sending request...');\n    setUploadProgress(10); // Initial progress\n    callGPT4(img, newPrompt);\n    alert(newPrompt);\n  };\n  const retakeMethod = () => {\n    setImg(null);\n    setStatusMessage('');\n    setAPIResult('');\n    setUploadProgress(0);\n    setPrompt('Imagine that I am a visual impaired individual. Tell me the brand and the object that I am holding. Only describe the object in the foreground. Do not describe the person holding the object.');\n    setSpeechValue('');\n  };\n  const uploadPhoto = imageSrc => {\n    const currentFileName = v4() + '.jpg';\n    setFilename(currentFileName);\n    const imgRef = ref(imageDb, `uploads/${currentFileName}`);\n    uploadString(imgRef, imageSrc, 'data_url');\n    uploadData(currentFileName);\n  };\n\n  // const dbValue = collection(database, 'conversations');\n  // const uploadData = async (currentFileName) => {\n  //   alert(currentFileName);\n  //   alert(prompt);\n  //   await addDoc(dbValue, {filename:currentFileName, conversation:prompt});\n  // }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Sight\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 7\n      }, this), img === null ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Webcam, {\n          audio: false,\n          mirrored: false,\n          height: 400,\n          width: 400,\n          ref: webcamRef,\n          screenshotFormat: \"image/jpeg\",\n          videoConstraints: videoConstraints\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: capture,\n          children: \"Capture photo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: img,\n          alt: \"screenshot\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: retakeMethod,\n          children: \"Retake\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true), speaking ? /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: cancel,\n        children: \"Stop\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: () => speak({\n          text: apiResult\n        }),\n        children: \"Speak\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 9\n      }, this), statusMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"status-message\",\n        children: statusMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 25\n      }, this), uploadProgress > 0 && /*#__PURE__*/_jsxDEV(\"progress\", {\n        value: uploadProgress,\n        max: \"100\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 7\n      }, this), apiResult && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"result\",\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Analysis Result:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: apiResult,\n          readOnly: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"result\",\n        children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: speechValue,\n          onChange: event => setSpeechValue(event.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 8\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          disabled: blocked,\n          type: \"button\",\n          onClick: toggle,\n          children: listening ? 'Stop' : 'Listen'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: sendNewPrompt,\n          children: \"Tell me more\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: uploadData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 181,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"he+V8nFVAo3hqQuWHEel7BiiSAE=\", false, function () {\n  return [useSpeechRecognition, useSpeechSynthesis];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useRef","useState","Navbar","Webcam","useSpeechRecognition","useSpeechSynthesis","imageDb","ref","uploadString","addDoc","collection","v4","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","speechValue","setSpeechValue","onEnd","onResult","speechResult","onError","event","error","setBlocked","listen","listening","stop","toggle","speak","cancel","speaking","img","setImg","webcamRef","apiResult","setAPIResult","statusMessage","setStatusMessage","uploadProgress","setUploadProgress","prompt","setPrompt","blocked","uploadedFileName","setFilename","videoConstraints","width","height","facingMode","capture","imageSrc","current","getScreenshot","callGPT4","uploadPhoto","talkmethod","textToRead","msg","SpeechSynthesisUtterance","text","window","speechSynthesis","imageString","promptToSend","base64String","replace","data","model","messages","max_tokens","response","fetch","method","headers","process","env","REACT_APP_OPENAI_API_KEY","body","JSON","stringify","ok","Error","status","apiResponse","json","choices","length","message","content","console","alert","sendNewPrompt","newPrompt","retakeMethod","currentFileName","imgRef","uploadData","className","children","fileName","_jsxFileName","lineNumber","columnNumber","audio","mirrored","screenshotFormat","onClick","src","alt","type","value","max","readOnly","onChange","target","disabled","_c","$RefreshReg$"],"sources":["/Users/jonathanyap/Downloads/Revised Sight/sight/src/App.js"],"sourcesContent":["import React, { useRef, useState, /*useCallback*/ } from 'react';\nimport './App.css';\nimport Navbar from './Components/Navbar';\nimport Webcam from \"react-webcam\";\nimport { useSpeechRecognition, useSpeechSynthesis } from 'react-speech-kit';\nimport { imageDb } from './firebaseConfig';\nimport { ref, uploadString } from 'firebase/storage';\nimport { addDoc, collection } from 'firebase/firestore';\nimport { v4 } from 'uuid';\n\n\nfunction App() {\n  const [speechValue, setSpeechValue] = useState('')\n  // const { listen, listening, stop } = useSpeechRecognition({\n  //   onResult: (speechResult) => {\n  //     setSpeechValue(speechResult)\n  //   }\n  // })\n\n  const onEnd = () => {\n    // You could do something here after listening has finished\n  };\n\n  const onResult = (speechResult) => {\n    setSpeechValue(speechResult);\n  };\n\n  const onError = (event) => {\n    if (event.error === 'not-allowed') {\n      setBlocked(true);\n    }\n  };\n\n  const { listen, listening, stop } = useSpeechRecognition({\n    onResult,\n    onEnd,\n    onError,\n  });\n\n  const toggle = listening\n    ? stop\n    : () => {\n        setBlocked(false);\n        listen();\n      };\n\n    const { speak, cancel, speaking } = useSpeechSynthesis({\n      onEnd,\n    });\n\n  const [img, setImg] = useState(null);\n  const webcamRef = useRef(null);\n  const [apiResult, setAPIResult] = useState('');\n  const [statusMessage, setStatusMessage] = useState('');\n  const [uploadProgress, setUploadProgress] = useState(0);\n  const [prompt, setPrompt] = useState('Imagine that I am a visual impaired individual. Tell me the brand and the object that I am holding. Only describe the object in the foreground. Do not describe the person holding the object.');\n  const [blocked, setBlocked] = useState(false);\n  const [uploadedFileName, setFilename] = useState('');\n\n  const videoConstraints = {\n    width: 420,\n    height: 420,\n    facingMode: \"environment\",\n  };\n\n  // const capture = useCallback(() => {\n  //   const imageSrc = webcamRef.current.getScreenshot();\n  //   setImg(imageSrc);\n  //   setStatusMessage('Sending request...');\n  //   setUploadProgress(10); // Initial progress\n  //   // eslint-disable-next-line react-hooks/exhaustive-deps\n  //   callGPT4(imageSrc, prompt); \n  // }, [webcamRef]);\n\n  const capture = () => {\n    const imageSrc = webcamRef.current.getScreenshot();\n    setImg(imageSrc);\n    setStatusMessage('Sending request...');\n    setUploadProgress(10); // Initial progress\n    callGPT4(imageSrc, prompt); \n    uploadPhoto(imageSrc);\n  }\n\n  const talkmethod = (textToRead) => {\n    const msg = new SpeechSynthesisUtterance();\n    msg.text = textToRead;\n    window.speechSynthesis.speak(msg);\n  }\n\n  const callGPT4 = async (imageString, promptToSend) => {\n    const base64String = imageString.replace('data:', '').replace(/^.+,/, '');\n\n    const data = {\n      model: \"gpt-4-vision-preview\",\n      messages: [\n        {\n          \"role\": \"user\",\n          \"content\": [\n            {\n              \"type\": \"text\",\n              \"text\": promptToSend\n            },\n            {\n              \"type\": \"image_url\",\n              \"image_url\": {\n                \"url\": `data:image/jpeg;base64,${base64String}`\n              }\n            }\n          ]\n        }\n      ],\n      max_tokens: 200\n    };\n\n    try {\n      const response = await fetch('https://api.openai.com/v1/chat/completions', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${process.env.REACT_APP_OPENAI_API_KEY}` // Use environment variable for API key\n        },\n        body: JSON.stringify(data)\n      });\n      setUploadProgress(50); // Midway progressgit\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const apiResponse = await response.json();\n      setUploadProgress(100); // Final progress\n      if (apiResponse.choices && apiResponse.choices.length > 0) {\n        talkmethod(apiResponse.choices[0].message.content);\n        setAPIResult(apiResponse.choices[0].message.content);\n        setStatusMessage('Analysis complete.');     \n      } else {\n        console.error('No choices returned from API');\n        setStatusMessage('Failed to get a response from the API.');\n      }\n    } catch (error) {\n      console.error('Error:', error);\n      alert(error);\n      alert(process.env.REACT_APP_OPENAI_API_KEY);\n      setStatusMessage('An error occurred during the analysis.');\n    }\n  };\n\n  const sendNewPrompt = () => {\n    const newPrompt = prompt + '\\n' + apiResult + '\\n' + speechValue\n    setPrompt(newPrompt)\n    setStatusMessage('Sending request...');\n    setUploadProgress(10); // Initial progress\n    callGPT4(img, newPrompt)\n    alert(newPrompt)\n  };\n\n  const retakeMethod = () => {\n    setImg(null)\n    setStatusMessage('')\n    setAPIResult('')\n    setUploadProgress(0)\n    setPrompt('Imagine that I am a visual impaired individual. Tell me the brand and the object that I am holding. Only describe the object in the foreground. Do not describe the person holding the object.')\n    setSpeechValue('')\n  }\n\n  const uploadPhoto = (imageSrc) => {\n    const currentFileName = v4()+'.jpg';\n    setFilename(currentFileName);\n    const imgRef = ref(imageDb, `uploads/${currentFileName}`);\n    uploadString(imgRef, imageSrc, 'data_url');\n    uploadData(currentFileName);\n  }\n\n  // const dbValue = collection(database, 'conversations');\n  // const uploadData = async (currentFileName) => {\n  //   alert(currentFileName);\n  //   alert(prompt);\n  //   await addDoc(dbValue, {filename:currentFileName, conversation:prompt});\n  // }\n\n\n  return (\n    <div className=\"App\">\n      <Navbar />\n      <div className=\"Container\">\n      <h1>Sight</h1>\n      {img === null ? (\n        <>\n          <Webcam\n            audio={false}\n            mirrored={false}\n            height={400}\n            width={400}\n            ref={webcamRef}\n            screenshotFormat=\"image/jpeg\"\n            videoConstraints={videoConstraints}\n          />\n          <button onClick={capture}>Capture photo</button>\n        </>\n      ) : (\n        <>\n          <img src={img} alt=\"screenshot\" />\n          <button onClick={retakeMethod}>Retake</button>\n        </>\n      )}\n      {speaking ? (\n        <button type=\"button\" onClick={cancel}>\n          Stop\n        </button>\n      ) : (\n        <button\n          type=\"button\"\n          onClick={() => speak({text: apiResult})}\n        >\n          Speak\n        </button>\n      )}\n      \n      {statusMessage && <p className=\"status-message\">{statusMessage}</p >}\n      {uploadProgress > 0 && (\n        <progress value={uploadProgress} max=\"100\"></progress>\n      )} \n      <p></p>\n      {apiResult && (\n        <div className=\"result\">\n          <strong>Analysis Result:</strong>\n          <textarea value={apiResult} readOnly />\n        </div>\n      )}\n\n      <div className=\"result\">\n       <textarea\n         value={speechValue}\n         onChange={(event) => setSpeechValue(event.target.value)}\n        />\n        {/* <button onMouseDown={listen} onMouseUp={stop}>\n          🎤\n        </button> */}\n\n        <button disabled={blocked} type=\"button\" onClick={toggle}>\n          {listening ? 'Stop' : 'Listen'}\n        </button>\n\n        <button onClick={sendNewPrompt}>\n          Tell me more\n        </button>\n        <button onClick={uploadData} />\n       </div>\n    </div>   \n  </div>\n  );\n}\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}