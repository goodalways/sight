{"ast":null,"code":"var _jsxFileName = \"/Users/jonathanyap/Downloads/Revised Sight/sight/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState /*useCallback*/ } from 'react';\nimport './App.css';\nimport Navbar from './Components/Navbar';\nimport Webcam from \"react-webcam\";\nimport { useSpeechRecognition, useSpeechSynthesis } from 'react-speech-kit';\nimport { imageDb, textDb } from './firebaseConfig';\nimport { ref, uploadString } from 'firebase/storage';\nimport { addDoc, collection, doc, updateDoc } from 'firebase/firestore';\nimport { v4 } from 'uuid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const newDate = new Date();\n  const date = newDate.getDate();\n  const month = newDate.getMonth() + 1;\n  const year = newDate.getFullYear();\n  const hour = newDate.getHours();\n  const minute = newDate.getMinutes();\n  const second = newDate.getSeconds();\n  const [speechValue, setSpeechValue] = useState('');\n  // const { listen, listening, stop } = useSpeechRecognition({\n  //   onResult: (speechResult) => {\n  //     setSpeechValue(speechResult)\n  //   }\n  // })\n\n  const onEnd = () => {\n    // You could do something here after listening has finished\n  };\n  const onResult = speechResult => {\n    setSpeechValue(speechResult);\n  };\n  const onError = event => {\n    if (event.error === 'not-allowed') {\n      setBlocked(true);\n    }\n  };\n  const {\n    listen,\n    listening,\n    stop\n  } = useSpeechRecognition({\n    onResult,\n    onEnd,\n    onError\n  });\n  const toggle = listening ? stop : () => {\n    setBlocked(false);\n    listen();\n  };\n  const {\n    speak,\n    cancel,\n    speaking\n  } = useSpeechSynthesis({\n    onEnd\n  });\n  const [img, setImg] = useState(null);\n  const webcamRef = useRef(null);\n  const [apiResult, setAPIResult] = useState('');\n  const [statusMessage, setStatusMessage] = useState('');\n  const [uploadProgress, setUploadProgress] = useState(0);\n  const [prompt, setPrompt] = useState('Imagine that I am a visual impaired individual. Tell me the brand and the object that I am holding. Only describe the object in the foreground. Do not describe the person holding the object.');\n  const [blocked, setBlocked] = useState(false);\n  const [dataId, setDataId] = useState('');\n  const videoConstraints = {\n    width: 420,\n    height: 420,\n    facingMode: \"environment\"\n  };\n\n  // const capture = useCallback(() => {\n  //   const imageSrc = webcamRef.current.getScreenshot();\n  //   setImg(imageSrc);\n  //   setStatusMessage('Sending request...');\n  //   setUploadProgress(10); // Initial progress\n  //   // eslint-disable-next-line react-hooks/exhaustive-deps\n  //   callGPT4(imageSrc, prompt); \n  // }, [webcamRef]);\n\n  const capture = () => {\n    const imageSrc = webcamRef.current.getScreenshot();\n    setImg(imageSrc);\n    setStatusMessage('Sending request...');\n    setUploadProgress(10); // Initial progress\n    callGPT4(imageSrc, prompt);\n    uploadPhoto(imageSrc);\n  };\n  const talkmethod = textToRead => {\n    const msg = new SpeechSynthesisUtterance();\n    //msg.voices = voices[3];\n    msg.text = textToRead;\n    msg.selectedOptions[0].getAttribute('data-name');\n    window.speechSynthesis.speak(msg);\n  };\n  const callGPT4 = async (imageString, promptToSend) => {\n    const base64String = imageString.replace('data:', '').replace(/^.+,/, '');\n    const data = {\n      model: \"gpt-4-vision-preview\",\n      messages: [{\n        \"role\": \"user\",\n        \"content\": [{\n          \"type\": \"text\",\n          \"text\": promptToSend\n        }, {\n          \"type\": \"image_url\",\n          \"image_url\": {\n            \"url\": `data:image/jpeg;base64,${base64String}`\n          }\n        }]\n      }],\n      max_tokens: 10\n    };\n    try {\n      const response = await fetch('https://api.openai.com/v1/chat/completions', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${process.env.REACT_APP_OPENAI_API_KEY}` // Use environment variable for API key\n        },\n\n        body: JSON.stringify(data)\n      });\n      setUploadProgress(50); // Midway progressgit\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const apiResponse = await response.json();\n      setUploadProgress(100); // Final progress\n      if (apiResponse.choices && apiResponse.choices.length > 0) {\n        talkmethod(apiResponse.choices[0].message.content);\n        setAPIResult(apiResponse.choices[0].message.content);\n        setStatusMessage('Analysis complete.');\n      } else {\n        console.error('No choices returned from API');\n        setStatusMessage('Failed to get a response from the API.');\n      }\n    } catch (error) {\n      console.error('Error:', error);\n      alert(error);\n      alert(process.env.REACT_APP_OPENAI_API_KEY);\n      setStatusMessage('An error occurred during the analysis.');\n    }\n  };\n  const sendNewPrompt = () => {\n    const newPrompt = prompt + '\\n\\n' + apiResult + '\\n\\n' + speechValue;\n    setPrompt(newPrompt);\n    setStatusMessage('Sending request...');\n    setUploadProgress(10); // Initial progress\n    callGPT4(img, newPrompt);\n    updateData(newPrompt);\n    //alert(newPrompt)\n  };\n\n  const retakeMethod = () => {\n    setImg(null);\n    setStatusMessage('');\n    setAPIResult('');\n    setUploadProgress(0);\n    setPrompt('Imagine that I am a visual impaired individual. Tell me the brand and the object that I am holding. Only describe the object in the foreground. Do not describe the person holding the object.');\n    setSpeechValue('');\n  };\n  const uploadPhoto = imageSrc => {\n    const currentFileName = v4() + '.jpg';\n    const imgRef = ref(imageDb, `uploads/${currentFileName}`);\n    uploadString(imgRef, imageSrc, 'data_url');\n    uploadData(imageSrc);\n  };\n  const dbValue = collection(textDb, 'conversations');\n  const uploadData = async image => {\n    await addDoc(dbValue, {\n      filePath: image,\n      conversation: prompt,\n      dateCreated: `${year}-${month < 10 ? `0${month}` : `${month}`}-${date}` + \" \" + `${hour}:${minute}:${second}`\n    }).then(docRef => {\n      setDataId(docRef.id);\n    });\n  };\n  const updateData = async newPrompt => {\n    const updateDBRef = doc(textDb, 'conversations', dataId);\n    await updateDoc(updateDBRef, {\n      conversation: newPrompt\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Sight\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 7\n      }, this), img === null ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Webcam, {\n          audio: false,\n          mirrored: false,\n          height: 400,\n          width: 400,\n          ref: webcamRef,\n          screenshotFormat: \"image/jpeg\",\n          videoConstraints: videoConstraints\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: capture,\n          children: \"Capture photo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: img,\n          alt: \"screenshot\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: retakeMethod,\n          children: \"Retake\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true), speaking ? /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: cancel,\n        children: \"Stop\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 9\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: () => speak({\n          text: apiResult\n        }),\n        children: \"Speak\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 9\n      }, this), statusMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"status-message\",\n        children: statusMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 25\n      }, this), uploadProgress > 0 && /*#__PURE__*/_jsxDEV(\"progress\", {\n        value: uploadProgress,\n        max: \"100\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 7\n      }, this), apiResult && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"result\",\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Analysis Result:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: apiResult,\n          readOnly: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"result\",\n        children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: speechValue,\n          onChange: event => setSpeechValue(event.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 8\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          disabled: blocked,\n          type: \"button\",\n          onClick: toggle,\n          children: listening ? 'Stop' : 'Listen'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: sendNewPrompt,\n          children: \"Tell me more\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 195,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"tcyp0/XK2OtwfxjM4wHWEI6FnEI=\", false, function () {\n  return [useSpeechRecognition, useSpeechSynthesis];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useRef","useState","Navbar","Webcam","useSpeechRecognition","useSpeechSynthesis","imageDb","textDb","ref","uploadString","addDoc","collection","doc","updateDoc","v4","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","newDate","Date","date","getDate","month","getMonth","year","getFullYear","hour","getHours","minute","getMinutes","second","getSeconds","speechValue","setSpeechValue","onEnd","onResult","speechResult","onError","event","error","setBlocked","listen","listening","stop","toggle","speak","cancel","speaking","img","setImg","webcamRef","apiResult","setAPIResult","statusMessage","setStatusMessage","uploadProgress","setUploadProgress","prompt","setPrompt","blocked","dataId","setDataId","videoConstraints","width","height","facingMode","capture","imageSrc","current","getScreenshot","callGPT4","uploadPhoto","talkmethod","textToRead","msg","SpeechSynthesisUtterance","text","selectedOptions","getAttribute","window","speechSynthesis","imageString","promptToSend","base64String","replace","data","model","messages","max_tokens","response","fetch","method","headers","process","env","REACT_APP_OPENAI_API_KEY","body","JSON","stringify","ok","Error","status","apiResponse","json","choices","length","message","content","console","alert","sendNewPrompt","newPrompt","updateData","retakeMethod","currentFileName","imgRef","uploadData","dbValue","image","filePath","conversation","dateCreated","then","docRef","id","updateDBRef","className","children","fileName","_jsxFileName","lineNumber","columnNumber","audio","mirrored","screenshotFormat","onClick","src","alt","type","value","max","readOnly","onChange","target","disabled","_c","$RefreshReg$"],"sources":["/Users/jonathanyap/Downloads/Revised Sight/sight/src/App.js"],"sourcesContent":["import React, { useRef, useState, /*useCallback*/ } from 'react';\nimport './App.css';\nimport Navbar from './Components/Navbar';\nimport Webcam from \"react-webcam\";\nimport { useSpeechRecognition, useSpeechSynthesis } from 'react-speech-kit';\nimport { imageDb, textDb } from './firebaseConfig';\nimport { ref, uploadString } from 'firebase/storage';\nimport { addDoc, collection, doc, updateDoc } from 'firebase/firestore';\nimport { v4 } from 'uuid';\n\n\nfunction App() {\n  const newDate = new Date();\n  const date = newDate.getDate();\n  const month = newDate.getMonth() + 1;\n  const year = newDate.getFullYear();\n  const hour = newDate.getHours();\n  const minute = newDate.getMinutes();\n  const second = newDate.getSeconds();\n\n  const [speechValue, setSpeechValue] = useState('')\n  // const { listen, listening, stop } = useSpeechRecognition({\n  //   onResult: (speechResult) => {\n  //     setSpeechValue(speechResult)\n  //   }\n  // })\n\n  const onEnd = () => {\n    // You could do something here after listening has finished\n  };\n\n  const onResult = (speechResult) => {\n    setSpeechValue(speechResult);\n  };\n\n  const onError = (event) => {\n    if (event.error === 'not-allowed') {\n      setBlocked(true);\n    }\n  };\n\n  const { listen, listening, stop } = useSpeechRecognition({\n    onResult,\n    onEnd,\n    onError,\n  });\n\n  const toggle = listening\n    ? stop\n    : () => {\n        setBlocked(false);\n        listen();\n      };\n\n    const { speak, cancel, speaking } = useSpeechSynthesis({\n      onEnd,\n    });\n\n  const [img, setImg] = useState(null);\n  const webcamRef = useRef(null);\n  const [apiResult, setAPIResult] = useState('');\n  const [statusMessage, setStatusMessage] = useState('');\n  const [uploadProgress, setUploadProgress] = useState(0);\n  const [prompt, setPrompt] = useState('Imagine that I am a visual impaired individual. Tell me the brand and the object that I am holding. Only describe the object in the foreground. Do not describe the person holding the object.');\n  const [blocked, setBlocked] = useState(false);\n  const [dataId, setDataId] = useState('');\n\n  const videoConstraints = {\n    width: 420,\n    height: 420,\n    facingMode: \"environment\",\n  };\n\n  // const capture = useCallback(() => {\n  //   const imageSrc = webcamRef.current.getScreenshot();\n  //   setImg(imageSrc);\n  //   setStatusMessage('Sending request...');\n  //   setUploadProgress(10); // Initial progress\n  //   // eslint-disable-next-line react-hooks/exhaustive-deps\n  //   callGPT4(imageSrc, prompt); \n  // }, [webcamRef]);\n\n  const capture = () => {\n    const imageSrc = webcamRef.current.getScreenshot();\n    setImg(imageSrc);\n    setStatusMessage('Sending request...');\n    setUploadProgress(10); // Initial progress\n    callGPT4(imageSrc, prompt); \n    uploadPhoto(imageSrc);\n  }\n\n  const talkmethod = (textToRead) => {\n    const msg = new SpeechSynthesisUtterance();\n    //msg.voices = voices[3];\n    msg.text = textToRead;\n    msg.selectedOptions[0].getAttribute('data-name');\n    window.speechSynthesis.speak(msg);\n  }\n\n  const callGPT4 = async (imageString, promptToSend) => {\n    const base64String = imageString.replace('data:', '').replace(/^.+,/, '');\n\n    const data = {\n      model: \"gpt-4-vision-preview\",\n      messages: [\n        {\n          \"role\": \"user\",\n          \"content\": [\n            {\n              \"type\": \"text\",\n              \"text\": promptToSend\n            },\n            {\n              \"type\": \"image_url\",\n              \"image_url\": {\n                \"url\": `data:image/jpeg;base64,${base64String}`\n              }\n            }\n          ]\n        }\n      ],\n      max_tokens: 10\n    };\n\n    try {\n      const response = await fetch('https://api.openai.com/v1/chat/completions', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${process.env.REACT_APP_OPENAI_API_KEY}` // Use environment variable for API key\n        },\n        body: JSON.stringify(data)\n      });\n      setUploadProgress(50); // Midway progressgit\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const apiResponse = await response.json();\n      setUploadProgress(100); // Final progress\n      if (apiResponse.choices && apiResponse.choices.length > 0) {\n        talkmethod(apiResponse.choices[0].message.content);\n        setAPIResult(apiResponse.choices[0].message.content);\n        setStatusMessage('Analysis complete.');     \n      } else {\n        console.error('No choices returned from API');\n        setStatusMessage('Failed to get a response from the API.');\n      }\n    } catch (error) {\n      console.error('Error:', error);\n      alert(error);\n      alert(process.env.REACT_APP_OPENAI_API_KEY);\n      setStatusMessage('An error occurred during the analysis.');\n    }\n  };\n\n  const sendNewPrompt = () => {\n    const newPrompt = prompt + '\\n\\n' + apiResult + '\\n\\n' + speechValue\n    setPrompt(newPrompt)\n    setStatusMessage('Sending request...');\n    setUploadProgress(10); // Initial progress\n    callGPT4(img, newPrompt)\n    updateData(newPrompt)\n    //alert(newPrompt)\n  };\n\n  const retakeMethod = () => {\n    setImg(null)\n    setStatusMessage('')\n    setAPIResult('')\n    setUploadProgress(0)\n    setPrompt('Imagine that I am a visual impaired individual. Tell me the brand and the object that I am holding. Only describe the object in the foreground. Do not describe the person holding the object.')\n    setSpeechValue('')\n  }\n\n  const uploadPhoto = (imageSrc) => {\n    const currentFileName = v4()+'.jpg';\n    const imgRef = ref(imageDb, `uploads/${currentFileName}`);\n    uploadString(imgRef, imageSrc, 'data_url');\n    uploadData(imageSrc);\n  }\n\n  const dbValue = collection(textDb, 'conversations');\n  const uploadData = async (image) => {\n    await addDoc(dbValue, {filePath:image, conversation:prompt, dateCreated:`${year}-${month<10?`0${month}`:`${month}`}-${date}` + \" \" + `${hour}:${minute}:${second}`}).then((docRef) => {\n      setDataId(docRef.id);\n    });\n  }\n  \n  const updateData = async (newPrompt) => {\n    const updateDBRef = doc(textDb, 'conversations', dataId);\n    await updateDoc(updateDBRef, {conversation:newPrompt});\n  }\n\n  return (\n    <div className=\"App\">\n      <Navbar />\n      <div className=\"Container\">\n      <h1>Sight</h1>\n      {img === null ? (\n        <>\n          <Webcam\n            audio={false}\n            mirrored={false}\n            height={400}\n            width={400}\n            ref={webcamRef}\n            screenshotFormat=\"image/jpeg\"\n            videoConstraints={videoConstraints}\n          />\n          <button onClick={capture}>Capture photo</button>\n        </>\n      ) : (\n        <>\n          <img src={img} alt=\"screenshot\" />\n          <button onClick={retakeMethod}>Retake</button>\n        </>\n      )}\n      {speaking ? (\n        <button type=\"button\" onClick={cancel}>\n          Stop\n        </button>\n      ) : (\n        <button\n          type=\"button\"\n          onClick={() => speak({text: apiResult})}\n        >\n          Speak\n        </button>\n      )}\n      \n      {statusMessage && <p className=\"status-message\">{statusMessage}</p >}\n      {uploadProgress > 0 && (\n        <progress value={uploadProgress} max=\"100\"></progress>\n      )} \n      <p></p>\n      {apiResult && (\n        <div className=\"result\">\n          <strong>Analysis Result:</strong>\n          <textarea value={apiResult} readOnly />\n        </div>\n      )}\n\n      <div className=\"result\">\n       <textarea\n         value={speechValue}\n         onChange={(event) => setSpeechValue(event.target.value)}\n        />\n        {/* <button onMouseDown={listen} onMouseUp={stop}>\n          🎤\n        </button> */}\n\n        <button disabled={blocked} type=\"button\" onClick={toggle}>\n          {listening ? 'Stop' : 'Listen'}\n        </button>\n\n        <button onClick={sendNewPrompt}>\n          Tell me more\n        </button>\n        {/* <button onClick={uploadData} /> */}\n       </div>\n    </div>   \n  </div>\n  );\n}\nexport default App;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,QAAQ,CAAE,uBAAuB,OAAO;AAChE,OAAO,WAAW;AAClB,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAOC,MAAM,MAAM,cAAc;AACjC,SAASC,oBAAoB,EAAEC,kBAAkB,QAAQ,kBAAkB;AAC3E,SAASC,OAAO,EAAEC,MAAM,QAAQ,kBAAkB;AAClD,SAASC,GAAG,EAAEC,YAAY,QAAQ,kBAAkB;AACpD,SAASC,MAAM,EAAEC,UAAU,EAAEC,GAAG,EAAEC,SAAS,QAAQ,oBAAoB;AACvE,SAASC,EAAE,QAAQ,MAAM;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAG1B,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAMC,OAAO,GAAG,IAAIC,IAAI,CAAC,CAAC;EAC1B,MAAMC,IAAI,GAAGF,OAAO,CAACG,OAAO,CAAC,CAAC;EAC9B,MAAMC,KAAK,GAAGJ,OAAO,CAACK,QAAQ,CAAC,CAAC,GAAG,CAAC;EACpC,MAAMC,IAAI,GAAGN,OAAO,CAACO,WAAW,CAAC,CAAC;EAClC,MAAMC,IAAI,GAAGR,OAAO,CAACS,QAAQ,CAAC,CAAC;EAC/B,MAAMC,MAAM,GAAGV,OAAO,CAACW,UAAU,CAAC,CAAC;EACnC,MAAMC,MAAM,GAAGZ,OAAO,CAACa,UAAU,CAAC,CAAC;EAEnC,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGnC,QAAQ,CAAC,EAAE,CAAC;EAClD;EACA;EACA;EACA;EACA;;EAEA,MAAMoC,KAAK,GAAGA,CAAA,KAAM;IAClB;EAAA,CACD;EAED,MAAMC,QAAQ,GAAIC,YAAY,IAAK;IACjCH,cAAc,CAACG,YAAY,CAAC;EAC9B,CAAC;EAED,MAAMC,OAAO,GAAIC,KAAK,IAAK;IACzB,IAAIA,KAAK,CAACC,KAAK,KAAK,aAAa,EAAE;MACjCC,UAAU,CAAC,IAAI,CAAC;IAClB;EACF,CAAC;EAED,MAAM;IAAEC,MAAM;IAAEC,SAAS;IAAEC;EAAK,CAAC,GAAG1C,oBAAoB,CAAC;IACvDkC,QAAQ;IACRD,KAAK;IACLG;EACF,CAAC,CAAC;EAEF,MAAMO,MAAM,GAAGF,SAAS,GACpBC,IAAI,GACJ,MAAM;IACJH,UAAU,CAAC,KAAK,CAAC;IACjBC,MAAM,CAAC,CAAC;EACV,CAAC;EAEH,MAAM;IAAEI,KAAK;IAAEC,MAAM;IAAEC;EAAS,CAAC,GAAG7C,kBAAkB,CAAC;IACrDgC;EACF,CAAC,CAAC;EAEJ,MAAM,CAACc,GAAG,EAAEC,MAAM,CAAC,GAAGnD,QAAQ,CAAC,IAAI,CAAC;EACpC,MAAMoD,SAAS,GAAGrD,MAAM,CAAC,IAAI,CAAC;EAC9B,MAAM,CAACsD,SAAS,EAAEC,YAAY,CAAC,GAAGtD,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACuD,aAAa,EAAEC,gBAAgB,CAAC,GAAGxD,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACyD,cAAc,EAAEC,iBAAiB,CAAC,GAAG1D,QAAQ,CAAC,CAAC,CAAC;EACvD,MAAM,CAAC2D,MAAM,EAAEC,SAAS,CAAC,GAAG5D,QAAQ,CAAC,gMAAgM,CAAC;EACtO,MAAM,CAAC6D,OAAO,EAAEnB,UAAU,CAAC,GAAG1C,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAAC8D,MAAM,EAAEC,SAAS,CAAC,GAAG/D,QAAQ,CAAC,EAAE,CAAC;EAExC,MAAMgE,gBAAgB,GAAG;IACvBC,KAAK,EAAE,GAAG;IACVC,MAAM,EAAE,GAAG;IACXC,UAAU,EAAE;EACd,CAAC;;EAED;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,MAAMC,OAAO,GAAGA,CAAA,KAAM;IACpB,MAAMC,QAAQ,GAAGjB,SAAS,CAACkB,OAAO,CAACC,aAAa,CAAC,CAAC;IAClDpB,MAAM,CAACkB,QAAQ,CAAC;IAChBb,gBAAgB,CAAC,oBAAoB,CAAC;IACtCE,iBAAiB,CAAC,EAAE,CAAC,CAAC,CAAC;IACvBc,QAAQ,CAACH,QAAQ,EAAEV,MAAM,CAAC;IAC1Bc,WAAW,CAACJ,QAAQ,CAAC;EACvB,CAAC;EAED,MAAMK,UAAU,GAAIC,UAAU,IAAK;IACjC,MAAMC,GAAG,GAAG,IAAIC,wBAAwB,CAAC,CAAC;IAC1C;IACAD,GAAG,CAACE,IAAI,GAAGH,UAAU;IACrBC,GAAG,CAACG,eAAe,CAAC,CAAC,CAAC,CAACC,YAAY,CAAC,WAAW,CAAC;IAChDC,MAAM,CAACC,eAAe,CAACnC,KAAK,CAAC6B,GAAG,CAAC;EACnC,CAAC;EAED,MAAMJ,QAAQ,GAAG,MAAAA,CAAOW,WAAW,EAAEC,YAAY,KAAK;IACpD,MAAMC,YAAY,GAAGF,WAAW,CAACG,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAACA,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC;IAEzE,MAAMC,IAAI,GAAG;MACXC,KAAK,EAAE,sBAAsB;MAC7BC,QAAQ,EAAE,CACR;QACE,MAAM,EAAE,MAAM;QACd,SAAS,EAAE,CACT;UACE,MAAM,EAAE,MAAM;UACd,MAAM,EAAEL;QACV,CAAC,EACD;UACE,MAAM,EAAE,WAAW;UACnB,WAAW,EAAE;YACX,KAAK,EAAG,0BAAyBC,YAAa;UAChD;QACF,CAAC;MAEL,CAAC,CACF;MACDK,UAAU,EAAE;IACd,CAAC;IAED,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,4CAA4C,EAAE;QACzEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClC,eAAe,EAAG,UAASC,OAAO,CAACC,GAAG,CAACC,wBAAyB,EAAC,CAAC;QACpE,CAAC;;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACb,IAAI;MAC3B,CAAC,CAAC;MACF7B,iBAAiB,CAAC,EAAE,CAAC,CAAC,CAAC;MACvB,IAAI,CAACiC,QAAQ,CAACU,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAE,uBAAsBX,QAAQ,CAACY,MAAO,EAAC,CAAC;MAC3D;MACA,MAAMC,WAAW,GAAG,MAAMb,QAAQ,CAACc,IAAI,CAAC,CAAC;MACzC/C,iBAAiB,CAAC,GAAG,CAAC,CAAC,CAAC;MACxB,IAAI8C,WAAW,CAACE,OAAO,IAAIF,WAAW,CAACE,OAAO,CAACC,MAAM,GAAG,CAAC,EAAE;QACzDjC,UAAU,CAAC8B,WAAW,CAACE,OAAO,CAAC,CAAC,CAAC,CAACE,OAAO,CAACC,OAAO,CAAC;QAClDvD,YAAY,CAACkD,WAAW,CAACE,OAAO,CAAC,CAAC,CAAC,CAACE,OAAO,CAACC,OAAO,CAAC;QACpDrD,gBAAgB,CAAC,oBAAoB,CAAC;MACxC,CAAC,MAAM;QACLsD,OAAO,CAACrE,KAAK,CAAC,8BAA8B,CAAC;QAC7Ce,gBAAgB,CAAC,wCAAwC,CAAC;MAC5D;IACF,CAAC,CAAC,OAAOf,KAAK,EAAE;MACdqE,OAAO,CAACrE,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;MAC9BsE,KAAK,CAACtE,KAAK,CAAC;MACZsE,KAAK,CAAChB,OAAO,CAACC,GAAG,CAACC,wBAAwB,CAAC;MAC3CzC,gBAAgB,CAAC,wCAAwC,CAAC;IAC5D;EACF,CAAC;EAED,MAAMwD,aAAa,GAAGA,CAAA,KAAM;IAC1B,MAAMC,SAAS,GAAGtD,MAAM,GAAG,MAAM,GAAGN,SAAS,GAAG,MAAM,GAAGnB,WAAW;IACpE0B,SAAS,CAACqD,SAAS,CAAC;IACpBzD,gBAAgB,CAAC,oBAAoB,CAAC;IACtCE,iBAAiB,CAAC,EAAE,CAAC,CAAC,CAAC;IACvBc,QAAQ,CAACtB,GAAG,EAAE+D,SAAS,CAAC;IACxBC,UAAU,CAACD,SAAS,CAAC;IACrB;EACF,CAAC;;EAED,MAAME,YAAY,GAAGA,CAAA,KAAM;IACzBhE,MAAM,CAAC,IAAI,CAAC;IACZK,gBAAgB,CAAC,EAAE,CAAC;IACpBF,YAAY,CAAC,EAAE,CAAC;IAChBI,iBAAiB,CAAC,CAAC,CAAC;IACpBE,SAAS,CAAC,gMAAgM,CAAC;IAC3MzB,cAAc,CAAC,EAAE,CAAC;EACpB,CAAC;EAED,MAAMsC,WAAW,GAAIJ,QAAQ,IAAK;IAChC,MAAM+C,eAAe,GAAGvG,EAAE,CAAC,CAAC,GAAC,MAAM;IACnC,MAAMwG,MAAM,GAAG9G,GAAG,CAACF,OAAO,EAAG,WAAU+G,eAAgB,EAAC,CAAC;IACzD5G,YAAY,CAAC6G,MAAM,EAAEhD,QAAQ,EAAE,UAAU,CAAC;IAC1CiD,UAAU,CAACjD,QAAQ,CAAC;EACtB,CAAC;EAED,MAAMkD,OAAO,GAAG7G,UAAU,CAACJ,MAAM,EAAE,eAAe,CAAC;EACnD,MAAMgH,UAAU,GAAG,MAAOE,KAAK,IAAK;IAClC,MAAM/G,MAAM,CAAC8G,OAAO,EAAE;MAACE,QAAQ,EAACD,KAAK;MAAEE,YAAY,EAAC/D,MAAM;MAAEgE,WAAW,EAAE,GAAEjG,IAAK,IAAGF,KAAK,GAAC,EAAE,GAAE,IAAGA,KAAM,EAAC,GAAE,GAAEA,KAAM,EAAE,IAAGF,IAAK,EAAC,GAAG,GAAG,GAAI,GAAEM,IAAK,IAAGE,MAAO,IAAGE,MAAO;IAAC,CAAC,CAAC,CAAC4F,IAAI,CAAEC,MAAM,IAAK;MACpL9D,SAAS,CAAC8D,MAAM,CAACC,EAAE,CAAC;IACtB,CAAC,CAAC;EACJ,CAAC;EAED,MAAMZ,UAAU,GAAG,MAAOD,SAAS,IAAK;IACtC,MAAMc,WAAW,GAAGpH,GAAG,CAACL,MAAM,EAAE,eAAe,EAAEwD,MAAM,CAAC;IACxD,MAAMlD,SAAS,CAACmH,WAAW,EAAE;MAACL,YAAY,EAACT;IAAS,CAAC,CAAC;EACxD,CAAC;EAED,oBACElG,OAAA;IAAKiH,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClBlH,OAAA,CAACd,MAAM;MAAAiI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACVtH,OAAA;MAAKiH,SAAS,EAAC,WAAW;MAAAC,QAAA,gBAC1BlH,OAAA;QAAAkH,QAAA,EAAI;MAAK;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EACbnF,GAAG,KAAK,IAAI,gBACXnC,OAAA,CAAAE,SAAA;QAAAgH,QAAA,gBACElH,OAAA,CAACb,MAAM;UACLoI,KAAK,EAAE,KAAM;UACbC,QAAQ,EAAE,KAAM;UAChBrE,MAAM,EAAE,GAAI;UACZD,KAAK,EAAE,GAAI;UACX1D,GAAG,EAAE6C,SAAU;UACfoF,gBAAgB,EAAC,YAAY;UAC7BxE,gBAAgB,EAAEA;QAAiB;UAAAkE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACpC,CAAC,eACFtH,OAAA;UAAQ0H,OAAO,EAAErE,OAAQ;UAAA6D,QAAA,EAAC;QAAa;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA,eAChD,CAAC,gBAEHtH,OAAA,CAAAE,SAAA;QAAAgH,QAAA,gBACElH,OAAA;UAAK2H,GAAG,EAAExF,GAAI;UAACyF,GAAG,EAAC;QAAY;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eAClCtH,OAAA;UAAQ0H,OAAO,EAAEtB,YAAa;UAAAc,QAAA,EAAC;QAAM;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA,eAC9C,CACH,EACApF,QAAQ,gBACPlC,OAAA;QAAQ6H,IAAI,EAAC,QAAQ;QAACH,OAAO,EAAEzF,MAAO;QAAAiF,QAAA,EAAC;MAEvC;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,gBAETtH,OAAA;QACE6H,IAAI,EAAC,QAAQ;QACbH,OAAO,EAAEA,CAAA,KAAM1F,KAAK,CAAC;UAAC+B,IAAI,EAAEzB;QAAS,CAAC,CAAE;QAAA4E,QAAA,EACzC;MAED;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CACT,EAEA9E,aAAa,iBAAIxC,OAAA;QAAGiH,SAAS,EAAC,gBAAgB;QAAAC,QAAA,EAAE1E;MAAa;QAAA2E,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,EACnE5E,cAAc,GAAG,CAAC,iBACjB1C,OAAA;QAAU8H,KAAK,EAAEpF,cAAe;QAACqF,GAAG,EAAC;MAAK;QAAAZ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAW,CACtD,eACDtH,OAAA;QAAAmH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,EACNhF,SAAS,iBACRtC,OAAA;QAAKiH,SAAS,EAAC,QAAQ;QAAAC,QAAA,gBACrBlH,OAAA;UAAAkH,QAAA,EAAQ;QAAgB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACjCtH,OAAA;UAAU8H,KAAK,EAAExF,SAAU;UAAC0F,QAAQ;QAAA;UAAAb,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACpC,CACN,eAEDtH,OAAA;QAAKiH,SAAS,EAAC,QAAQ;QAAAC,QAAA,gBACtBlH,OAAA;UACE8H,KAAK,EAAE3G,WAAY;UACnB8G,QAAQ,EAAGxG,KAAK,IAAKL,cAAc,CAACK,KAAK,CAACyG,MAAM,CAACJ,KAAK;QAAE;UAAAX,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACxD,CAAC,eAKFtH,OAAA;UAAQmI,QAAQ,EAAErF,OAAQ;UAAC+E,IAAI,EAAC,QAAQ;UAACH,OAAO,EAAE3F,MAAO;UAAAmF,QAAA,EACtDrF,SAAS,GAAG,MAAM,GAAG;QAAQ;UAAAsF,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACxB,CAAC,eAETtH,OAAA;UAAQ0H,OAAO,EAAEzB,aAAc;UAAAiB,QAAA,EAAC;QAEhC;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEL,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACJ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAER;AAAClH,EAAA,CA5PQD,GAAG;EAAA,QA8B0Bf,oBAAoB,EAalBC,kBAAkB;AAAA;AAAA+I,EAAA,GA3CjDjI,GAAG;AA6PZ,eAAeA,GAAG;AAAC,IAAAiI,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}