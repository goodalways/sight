{"ast":null,"code":"var _jsxFileName = \"/Users/jonathanyap/Downloads/Revised Sight/sight/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState /*useCallback*/ } from 'react';\nimport './App.css';\nimport Webcam from \"react-webcam\";\nimport { useSpeechRecognition } from 'react-speech-kit';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [speechValue, setSpeechValue] = useState('');\n  // const { listen, listening, stop } = useSpeechRecognition({\n  //   onResult: (speechResult) => {\n  //     setSpeechValue(speechResult)\n  //   }\n  // })\n\n  const onEnd = () => {\n    // You could do something here after listening has finished\n  };\n  const onResult = speechResult => {\n    setSpeechValue(speechResult);\n  };\n  const onError = event => {\n    if (event.error === 'not-allowed') {\n      setBlocked(true);\n    }\n  };\n  const {\n    listen,\n    listening,\n    stop\n  } = useSpeechRecognition({\n    onResult,\n    onEnd,\n    onError\n  });\n  const toggle = listening ? stop : () => {\n    setBlocked(false);\n    listen();\n  };\n  const [img, setImg] = useState(null);\n  const webcamRef = useRef(null);\n  const [apiResult, setAPIResult] = useState('');\n  const [statusMessage, setStatusMessage] = useState('');\n  const [uploadProgress, setUploadProgress] = useState(0);\n  const [prompt, setPrompt] = useState('Imagine that I am a visual impaired individual. Tell me the brand and the object that I am holding. Only describe the object in the foreground. Do not describe the person holding the object.');\n  const [blocked, setBlocked] = useState(false);\n  const videoConstraints = {\n    width: 420,\n    height: 420,\n    facingMode: \"environment\"\n  };\n\n  // const capture = useCallback(() => {\n  //   const imageSrc = webcamRef.current.getScreenshot();\n  //   setImg(imageSrc);\n  //   setStatusMessage('Sending request...');\n  //   setUploadProgress(10); // Initial progress\n  //   // eslint-disable-next-line react-hooks/exhaustive-deps\n  //   callGPT4(imageSrc, prompt); \n  // }, [webcamRef]);\n\n  const capture = () => {\n    const imageSrc = webcamRef.current.getScreenshot();\n    setImg(imageSrc);\n    setStatusMessage('Sending request...');\n    setUploadProgress(10); // Initial progress\n    callGPT4(imageSrc, prompt);\n  };\n  const talkmethod = textToRead => {\n    const msg = new SpeechSynthesisUtterance();\n    msg.text = textToRead;\n    window.speechSynthesis.speak(msg);\n  };\n  const callGPT4 = async (imageString, promptToSend) => {\n    const base64String = imageString.replace('data:', '').replace(/^.+,/, '');\n    const data = {\n      model: \"gpt-4-vision-preview\",\n      messages: [{\n        \"role\": \"user\",\n        \"content\": [{\n          \"type\": \"text\",\n          \"text\": promptToSend\n        }, {\n          \"type\": \"image_url\",\n          \"image_url\": {\n            \"url\": `data:image/jpeg;base64,${base64String}`\n          }\n        }]\n      }],\n      max_tokens: 200\n    };\n    try {\n      const response = await fetch('https://api.openai.com/v1/chat/completions', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${process.env.REACT_APP_OPENAI_API_KEY}` // Use environment variable for API key\n        },\n\n        body: JSON.stringify(data)\n      });\n      setUploadProgress(50); // Midway progressgit\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const apiResponse = await response.json();\n      setUploadProgress(100); // Final progress\n      if (apiResponse.choices && apiResponse.choices.length > 0) {\n        talkmethod(apiResponse.choices[0].message.content);\n        setAPIResult(apiResponse.choices[0].message.content);\n        setStatusMessage('Analysis complete.');\n      } else {\n        console.error('No choices returned from API');\n        setStatusMessage('Failed to get a response from the API.');\n      }\n    } catch (error) {\n      console.error('Error:', error);\n      alert(error);\n      alert(process.env.REACT_APP_OPENAI_API_KEY);\n      setStatusMessage('An error occurred during the analysis.');\n    }\n  };\n  const sendNewPrompt = () => {\n    const newPrompt = prompt + '\\n' + apiResult + '\\n' + speechValue;\n    setPrompt(newPrompt);\n    setStatusMessage('Sending request...');\n    setUploadProgress(10); // Initial progress\n    callGPT4(img, newPrompt);\n    alert(newPrompt);\n  };\n  const retakeMethod = () => {\n    setImg(null);\n    setStatusMessage('');\n    setAPIResult('');\n    setUploadProgress(0);\n    setPrompt('Imagine that I am a visual impaired individual. Tell me the brand and the object that I am holding. Only describe the object in the foreground. Do not describe the person holding the object.');\n    setSpeechValue('');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Sight\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Container\",\n      children: [img === null ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Webcam, {\n          audio: false,\n          mirrored: false,\n          height: 400,\n          width: 400,\n          ref: webcamRef,\n          screenshotFormat: \"image/jpeg\",\n          videoConstraints: videoConstraints\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: capture,\n          children: \"Capture photo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: img,\n          alt: \"screenshot\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: retakeMethod,\n          children: \"Retake\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: talkmethod(apiResult),\n        children: \"Talk\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this), statusMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"status-message\",\n      children: statusMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 25\n    }, this), uploadProgress > 0 && /*#__PURE__*/_jsxDEV(\"progress\", {\n      value: uploadProgress,\n      max: \"100\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 7\n    }, this), apiResult && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"result\",\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Analysis Result:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: apiResult,\n        readOnly: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"result\",\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: speechValue,\n        onChange: event => setSpeechValue(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 8\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: blocked,\n        type: \"button\",\n        onClick: toggle,\n        children: listening ? 'Stop' : 'Listen'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendNewPrompt,\n        children: \"Tell me more\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 153,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"O9Lw2RmHGNA2Ac9fBMR7UUAOF9M=\", false, function () {\n  return [useSpeechRecognition];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useRef","useState","Webcam","useSpeechRecognition","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","speechValue","setSpeechValue","onEnd","onResult","speechResult","onError","event","error","setBlocked","listen","listening","stop","toggle","img","setImg","webcamRef","apiResult","setAPIResult","statusMessage","setStatusMessage","uploadProgress","setUploadProgress","prompt","setPrompt","blocked","videoConstraints","width","height","facingMode","capture","imageSrc","current","getScreenshot","callGPT4","talkmethod","textToRead","msg","SpeechSynthesisUtterance","text","window","speechSynthesis","speak","imageString","promptToSend","base64String","replace","data","model","messages","max_tokens","response","fetch","method","headers","process","env","REACT_APP_OPENAI_API_KEY","body","JSON","stringify","ok","Error","status","apiResponse","json","choices","length","message","content","console","alert","sendNewPrompt","newPrompt","retakeMethod","className","children","fileName","_jsxFileName","lineNumber","columnNumber","audio","mirrored","ref","screenshotFormat","onClick","src","alt","value","max","readOnly","onChange","target","disabled","type","_c","$RefreshReg$"],"sources":["/Users/jonathanyap/Downloads/Revised Sight/sight/src/App.js"],"sourcesContent":["import React, { useRef, useState, /*useCallback*/ } from 'react';\nimport './App.css';\nimport Webcam from \"react-webcam\";\nimport { useSpeechRecognition } from 'react-speech-kit';\n\nfunction App() {\n  const [speechValue, setSpeechValue] = useState('')\n  // const { listen, listening, stop } = useSpeechRecognition({\n  //   onResult: (speechResult) => {\n  //     setSpeechValue(speechResult)\n  //   }\n  // })\n\n  const onEnd = () => {\n    // You could do something here after listening has finished\n  };\n\n  const onResult = (speechResult) => {\n    setSpeechValue(speechResult);\n  };\n\n  const onError = (event) => {\n    if (event.error === 'not-allowed') {\n      setBlocked(true);\n    }\n  };\n\n  const { listen, listening, stop } = useSpeechRecognition({\n    onResult,\n    onEnd,\n    onError,\n  });\n\n  const toggle = listening\n    ? stop\n    : () => {\n        setBlocked(false);\n        listen();\n      };\n\n  const [img, setImg] = useState(null);\n  const webcamRef = useRef(null);\n  const [apiResult, setAPIResult] = useState('');\n  const [statusMessage, setStatusMessage] = useState('');\n  const [uploadProgress, setUploadProgress] = useState(0);\n  const [prompt, setPrompt] = useState('Imagine that I am a visual impaired individual. Tell me the brand and the object that I am holding. Only describe the object in the foreground. Do not describe the person holding the object.');\n  const [blocked, setBlocked] = useState(false);\n\n  const videoConstraints = {\n    width: 420,\n    height: 420,\n    facingMode: \"environment\",\n  };\n\n  // const capture = useCallback(() => {\n  //   const imageSrc = webcamRef.current.getScreenshot();\n  //   setImg(imageSrc);\n  //   setStatusMessage('Sending request...');\n  //   setUploadProgress(10); // Initial progress\n  //   // eslint-disable-next-line react-hooks/exhaustive-deps\n  //   callGPT4(imageSrc, prompt); \n  // }, [webcamRef]);\n\n  const capture = () => {\n    const imageSrc = webcamRef.current.getScreenshot();\n    setImg(imageSrc);\n    setStatusMessage('Sending request...');\n    setUploadProgress(10); // Initial progress\n    callGPT4(imageSrc, prompt); \n  }\n\n  const talkmethod = (textToRead) => {\n    const msg = new SpeechSynthesisUtterance();\n    msg.text = textToRead;\n    window.speechSynthesis.speak(msg);\n  }\n\n  const callGPT4 = async (imageString, promptToSend) => {\n    const base64String = imageString.replace('data:', '').replace(/^.+,/, '');\n\n    const data = {\n      model: \"gpt-4-vision-preview\",\n      messages: [\n        {\n          \"role\": \"user\",\n          \"content\": [\n            {\n              \"type\": \"text\",\n              \"text\": promptToSend\n            },\n            {\n              \"type\": \"image_url\",\n              \"image_url\": {\n                \"url\": `data:image/jpeg;base64,${base64String}`\n              }\n            }\n          ]\n        }\n      ],\n      max_tokens: 200\n    };\n\n    try {\n      const response = await fetch('https://api.openai.com/v1/chat/completions', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${process.env.REACT_APP_OPENAI_API_KEY}` // Use environment variable for API key\n        },\n        body: JSON.stringify(data)\n      });\n      setUploadProgress(50); // Midway progressgit\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const apiResponse = await response.json();\n      setUploadProgress(100); // Final progress\n      if (apiResponse.choices && apiResponse.choices.length > 0) {\n        talkmethod(apiResponse.choices[0].message.content);\n        setAPIResult(apiResponse.choices[0].message.content);\n        setStatusMessage('Analysis complete.');     \n      } else {\n        console.error('No choices returned from API');\n        setStatusMessage('Failed to get a response from the API.');\n      }\n    } catch (error) {\n      console.error('Error:', error);\n      alert(error);\n      alert(process.env.REACT_APP_OPENAI_API_KEY);\n      setStatusMessage('An error occurred during the analysis.');\n    }\n  };\n\n  const sendNewPrompt = () => {\n    const newPrompt = prompt + '\\n' + apiResult + '\\n' + speechValue\n    setPrompt(newPrompt)\n    setStatusMessage('Sending request...');\n    setUploadProgress(10); // Initial progress\n    callGPT4(img, newPrompt)\n    alert(newPrompt)\n  };\n\n  const retakeMethod = () => {\n    setImg(null)\n    setStatusMessage('')\n    setAPIResult('')\n    setUploadProgress(0)\n    setPrompt('Imagine that I am a visual impaired individual. Tell me the brand and the object that I am holding. Only describe the object in the foreground. Do not describe the person holding the object.')\n    setSpeechValue('')\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Sight</h1>\n      <div className=\"Container\">\n      {img === null ? (\n        <>\n          <Webcam\n            audio={false}\n            mirrored={false}\n            height={400}\n            width={400}\n            ref={webcamRef}\n            screenshotFormat=\"image/jpeg\"\n            videoConstraints={videoConstraints}\n          />\n          <button onClick={capture}>Capture photo</button>\n        </>\n      ) : (\n        <>\n          <img src={img} alt=\"screenshot\" />\n          <button onClick={retakeMethod}>Retake</button>\n        </>\n      )}\n      <button onClick={talkmethod(apiResult)}>Talk</button>\n    </div>\n      {statusMessage && <p className=\"status-message\">{statusMessage}</p >}\n      {uploadProgress > 0 && (\n        <progress value={uploadProgress} max=\"100\"></progress>\n      )} \n      <p></p>\n      {apiResult && (\n        <div className=\"result\">\n          <strong>Analysis Result:</strong>\n          <textarea value={apiResult} readOnly />\n        </div>\n      )}\n\n      <div className=\"result\">\n       <textarea\n         value={speechValue}\n         onChange={(event) => setSpeechValue(event.target.value)}\n        />\n        {/* <button onMouseDown={listen} onMouseUp={stop}>\n          🎤\n        </button> */}\n\n        <button disabled={blocked} type=\"button\" onClick={toggle}>\n          {listening ? 'Stop' : 'Listen'}\n        </button>\n\n        <button onClick={sendNewPrompt}>\n          Tell me more\n        </button>\n       </div>\n\n    </div>\n  );\n}\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}